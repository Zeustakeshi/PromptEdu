#!/usr/bin/env node
/**
 * Full Migration Script
 * Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc migration m·ªôt l·∫ßn
 */

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

function runCommand(command, description) {
    console.log(`\nüìù ${description}...`);
    try {
        execSync(command, { stdio: 'inherit' });
        console.log(`‚úÖ ${description} - Ho√†n th√†nh`);
        return true;
    } catch (error) {
        console.error(`‚ùå ${description} - Th·∫•t b·∫°i`);
        return false;
    }
}

async function main() {
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë   üöÄ FULL MIGRATION: Gi√°o √°n ‚Üí K·∫ø ho·∫°ch b√†i d·∫°y          ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    // Warning
    console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO QUAN TR·ªåNG:');
    console.log('   - Script n√†y s·∫Ω thay ƒë·ªïi d·ªØ li·ªáu trong database');
    console.log('   - ƒê·∫£m b·∫£o b·∫°n ƒë√£ backup database');
    console.log('   - ƒê√≥ng t·∫•t c·∫£ ·ª©ng d·ª•ng ƒëang k·∫øt n·ªëi database\n');

    const confirm = await question('B·∫°n ƒë√£ backup database ch∆∞a? (yes/no): ');
    
    if (confirm.toLowerCase() !== 'yes' && confirm.toLowerCase() !== 'y') {
        console.log('\n‚ùå Vui l√≤ng backup database tr∆∞·ªõc khi ti·∫øp t·ª•c!');
        console.log('   Ch·∫°y: pg_dump -U username -d database > backup.sql\n');
        rl.close();
        process.exit(0);
    }

    console.log('\nüéØ B·∫Øt ƒë·∫ßu migration...\n');

    // Step 1: Update code files (already done, just verify)
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('B∆Ø·ªöC 1: Ki·ªÉm tra code files');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ Code files ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t (28 files, 70 replacements)');
    console.log('‚úÖ Documentation ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t (6 files, 33 replacements)\n');

    // Step 2: Update database
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('B∆Ø·ªöC 2: C·∫≠p nh·∫≠t Database');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const dbSuccess = runCommand(
        'node scripts/simple-db-update.js',
        'Ch·∫°y SQL migration'
    );

    if (!dbSuccess) {
        console.log('\n‚ùå Database migration th·∫•t b·∫°i!');
        const continueAnyway = await question('Ti·∫øp t·ª•c v·ªõi re-seed? (yes/no): ');
        if (continueAnyway.toLowerCase() !== 'yes' && continueAnyway.toLowerCase() !== 'y') {
            rl.close();
            process.exit(1);
        }
    }

    // Step 3: Re-seed AI Tools
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('B∆Ø·ªöC 3: Re-seed AI Tools');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const reseedConfirm = await question('Re-seed AI Tools? (yes/no): ');
    
    if (reseedConfirm.toLowerCase() === 'yes' || reseedConfirm.toLowerCase() === 'y') {
        runCommand(
            'node scripts/reseed-ai-tools.js',
            'Re-seed AI Tools'
        );
    } else {
        console.log('‚è≠Ô∏è  B·ªè qua re-seed AI Tools');
    }

    // Step 4: Summary
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä T·ªîNG K·∫æT');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ Code files: ƒê√£ c·∫≠p nh·∫≠t');
    console.log('‚úÖ Documentation: ƒê√£ c·∫≠p nh·∫≠t');
    console.log(`${dbSuccess ? '‚úÖ' : '‚ö†Ô∏è'} Database: ${dbSuccess ? 'ƒê√£ c·∫≠p nh·∫≠t' : 'C√≥ l·ªói'}`);
    console.log('');

    // Step 5: Next steps
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìã B∆Ø·ªöC TI·∫æP THEO');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('1. Ch·∫°y ·ª©ng d·ª•ng: npm run dev');
    console.log('2. Ki·ªÉm tra c√°c trang:');
    console.log('   - http://localhost:3000 (Trang ch·ªß)');
    console.log('   - http://localhost:3000/create-prompt (T·∫°o prompt)');
    console.log('   - http://localhost:3000/templates (Templates)');
    console.log('   - http://localhost:3000/admin/ai-tools (Admin)');
    console.log('3. Test t·∫°o prompt m·ªõi');
    console.log('4. Ki·ªÉm tra kh√¥ng c√≤n ch·ªØ "gi√°o √°n" trong UI\n');

    console.log('üéâ Migration ho√†n t·∫•t!\n');

    rl.close();
}

main().catch(error => {
    console.error('\n‚ùå L·ªói:', error);
    rl.close();
    process.exit(1);
});
