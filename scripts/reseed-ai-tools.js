#!/usr/bin/env node
/**
 * Re-seed AI Tools only
 * This will delete and recreate AI tools with updated data
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function reseedAITools() {
    console.log('üöÄ Re-seeding AI Tools v·ªõi d·ªØ li·ªáu m·ªõi\n');

    try {
        // Step 1: Count existing AI tools
        const existingCount = await prisma.aITool.count();
        console.log(`üìä Hi·ªán c√≥ ${existingCount} AI tools trong database\n`);

        // Step 2: Delete existing AI tools
        console.log('üóëÔ∏è  ƒêang x√≥a AI tools c≈©...');
        const deleted = await prisma.aITool.deleteMany({});
        console.log(`‚úÖ ƒê√£ x√≥a ${deleted.count} AI tools\n`);

        // Step 3: Import and run seed
        console.log('üìù ƒêang t·∫°o l·∫°i AI tools v·ªõi d·ªØ li·ªáu m·ªõi...');
        
        // Dynamically import the TypeScript module
        const seedModule = await import('../src/lib/admin/seed-data.ts');
        await seedModule.seedAITools();

        // Step 4: Count new AI tools
        const newCount = await prisma.aITool.count();
        console.log(`\n‚úÖ ƒê√£ t·∫°o ${newCount} AI tools m·ªõi\n`);

        // Step 5: Verify the data
        console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu m·ªõi...\n');

        const toolsWithNewTerm = await prisma.aITool.count({
            where: {
                OR: [
                    { description: { contains: 'k·∫ø ho·∫°ch b√†i d·∫°y' } },
                    { useCase: { contains: 'k·∫ø ho·∫°ch b√†i d·∫°y' } },
                    { features: { contains: 'k·∫ø ho·∫°ch b√†i d·∫°y' } }
                ]
            }
        });

        const toolsWithOldTerm = await prisma.aITool.count({
            where: {
                OR: [
                    { description: { contains: 'gi√°o √°n' } },
                    { useCase: { contains: 'gi√°o √°n' } },
                    { features: { contains: 'gi√°o √°n' } }
                ]
            }
        });

        console.log(`‚úÖ AI tools c√≥ "k·∫ø ho·∫°ch b√†i d·∫°y": ${toolsWithNewTerm}`);
        console.log(`${toolsWithOldTerm > 0 ? '‚ö†Ô∏è' : '‚úÖ'} AI tools c√≤n "gi√°o √°n": ${toolsWithOldTerm}\n`);

        // Step 6: Show sample data
        console.log('üìã M·∫´u d·ªØ li·ªáu m·ªõi:\n');
        const sampleTools = await prisma.aITool.findMany({
            take: 3,
            select: {
                name: true,
                description: true,
                useCase: true
            }
        });

        sampleTools.forEach((tool, index) => {
            console.log(`${index + 1}. ${tool.name}`);
            console.log(`   M√¥ t·∫£: ${tool.description.substring(0, 80)}...`);
            console.log(`   Use case: ${tool.useCase.substring(0, 80)}...`);
            console.log('');
        });

        console.log('üéâ Re-seed ho√†n t·∫•t!\n');
        console.log('üìã B∆∞·ªõc ti·∫øp theo:');
        console.log('1. Ki·ªÉm tra ·ª©ng d·ª•ng: npm run dev');
        console.log('2. Xem danh s√°ch AI tools t·∫°i /admin/ai-tools');
        console.log('3. T·∫°o prompt m·ªõi ƒë·ªÉ test');

    } catch (error) {
        console.error('\n‚ùå L·ªói khi re-seed:', error);
        console.error('\nChi ti·∫øt:', error.message);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

reseedAITools();
