#!/usr/bin/env node
/**
 * Migration script: Replace "gi√°o √°n" with "k·∫ø ho·∫°ch b√†i d·∫°y"
 * Run: node scripts/migrate-giao-an-to-ke-hoach.js
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Define replacement patterns (order matters - more specific first)
const replacements = [
    { old: 'Template so·∫°n gi√°o √°n', new: 'Template so·∫°n k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'Template t·∫°o gi√°o √°n', new: 'Template t·∫°o k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'Prompt Gi√°o √Ån', new: 'Prompt K·∫ø Ho·∫°ch B√†i D·∫°y' },
    { old: 'T·∫°o Gi√°o √Ån', new: 'T·∫°o K·∫ø Ho·∫°ch B√†i D·∫°y' },
    { old: 'T·∫°o Prompt Gi√°o √Ån', new: 'T·∫°o Prompt K·∫ø Ho·∫°ch B√†i D·∫°y' },
    { old: 'Th√¥ng tin gi√°o √°n', new: 'Th√¥ng tin k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'Ch·ªß ƒë·ªÅ gi√°o √°n', new: 'Ch·ªß ƒë·ªÅ k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'ƒê·ªãnh d·∫°ng gi√°o √°n', new: 'ƒê·ªãnh d·∫°ng k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'C·∫§U TR√öC GI√ÅO √ÅN', new: 'C·∫§U TR√öC K·∫æ HO·∫†CH B√ÄI D·∫†Y' },
    { old: 'm·∫´u gi√°o √°n', new: 'm·∫´u k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'So·∫°n gi√°o √°n', new: 'So·∫°n k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'so·∫°n gi√°o √°n', new: 'so·∫°n k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'T·∫°o gi√°o √°n', new: 'T·∫°o k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 't·∫°o gi√°o √°n', new: 't·∫°o k·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'GI√ÅO √ÅN', new: 'K·∫æ HO·∫†CH B√ÄI D·∫†Y' },
    { old: 'Gi√°o √°n', new: 'K·∫ø ho·∫°ch b√†i d·∫°y' },
    { old: 'gi√°o √°n', new: 'k·∫ø ho·∫°ch b√†i d·∫°y' }
];

// File patterns to process
const filePatterns = [
    'src/**/*.ts',
    'src/**/*.tsx',
    'src/**/*.js',
    'src/**/*.jsx'
];

// Counters
let filesChanged = 0;
let totalReplacements = 0;

console.log('üöÄ Starting migration: gi√°o √°n -> k·∫ø ho·∫°ch b√†i d·∫°y\n');

// Process each file pattern
filePatterns.forEach(pattern => {
    const files = glob.sync(pattern, { nodir: true });
    
    files.forEach(filePath => {
        try {
            let content = fs.readFileSync(filePath, 'utf8');
            const originalContent = content;
            let fileReplacements = 0;
            
            // Apply all replacements
            replacements.forEach(({ old, new: newValue }) => {
                const regex = new RegExp(escapeRegExp(old), 'g');
                const matches = (content.match(regex) || []).length;
                if (matches > 0) {
                    content = content.replace(regex, newValue);
                    fileReplacements += matches;
                }
            });
            
            // Save if content changed
            if (content !== originalContent) {
                fs.writeFileSync(filePath, content, 'utf8');
                filesChanged++;
                totalReplacements += fileReplacements;
                console.log(`‚úÖ Updated: ${filePath} (${fileReplacements} replacements)`);
            }
        } catch (error) {
            console.error(`‚ùå Error processing ${filePath}:`, error.message);
        }
    });
});

console.log('\n‚ú® Migration completed!');
console.log(`üìÅ Files changed: ${filesChanged}`);
console.log(`üîÑ Total replacements: ${totalReplacements}`);

console.log('\nüìã Next steps:');
console.log('1. Run database migration SQL script');
console.log('2. Update seed data if needed');
console.log('3. Test the application: npm run dev');

// Helper function to escape special regex characters
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
